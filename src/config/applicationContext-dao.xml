<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:context="http://www.springframework.org/schema/context"

xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	
	
	
	
	<!-- 1加载db.properties文件中的内容 db.properties文件中命名要有一定的特殊规则易懂 -->
	<context:property-placeholder location="classpath:config/db.properties" />
	

<!-- 需要c3p0-0.9.5.2.jar和mchange-commons-java-0.2.11.jar
mysql驱动包mysql-connector-java-3.0.16-ga-bin.jar，jdbc2_0-stdext.jar，proxool-0.8.3.jar-->
<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >
		<property name="properties"> 
		<bean class="com.system.utils.C3P0DatasourcePropertiesFactory" factory-method="getProperties">
                <constructor-arg type="java.lang.String">
                    <value>${jdbc.password}</value>
                </constructor-arg>
                <!-- 生产环境模式 ，才特殊处理加密密码-->  
                <constructor-arg type="java.lang.String">
                    <value>${jdbc.password.encrypted}</value>
                </constructor-arg>
        </bean>
   		</property>

   <property name="driverClass" value="com.mysql.jdbc.Driver" />
   <property name="jdbcUrl" value="${jdbc.url}" />
   <property name="user" value="${jdbc.username}" />
   <!-- <property name="password" value="${jdbc.password}" /> -->
   <!-- 
   <property name="driverClass" value="com.mysql.jdbc.Driver" />
   <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/agcsdb1?characterEncoding=utf-8" />
   <property name="user" value="pangzaixi" />
   <property name="password" value="123456" />
   -->
   
   <property name="minPoolSize">              <value>5</value>          </property><!--连接池中保留的最小连接数。-->      
   <property name="maxPoolSize">              <value>30</value>          </property>  <!--连接池中保留的最大连接数。Default: 15 -->
   <property name="initialPoolSize">             <value>10</value>      </property>  <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->  
   <property name="maxIdleTime">              <value>60</value>        </property>  <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->  
   <property name="acquireIncrement">            <value>5</value>         </property><!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->    
 	<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements  
  	属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。  
  	如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->  
   <property name="maxStatements">           <value>0</value>         </property>  
   <property name="idleConnectionTestPeriod">             <value>60</value>         </property><!--每60秒检查所有连接池中的空闲连接。Default: 0 -->    
   <property name="acquireRetryAttempts">             <value>30</value>         </property>  <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->  
 	<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效  
  	保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试  
  	获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->  
   <property name="breakAfterAcquireFailure">             <value>true</value>          </property>  
 	<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的  
  	时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable  
  	等方法来提升连接测试的性能。Default: false -->  
   <property name="testConnectionOnCheckout">             <value>false</value>          </property>  
</bean>

<!-- 需要mybatis-spring.jar的支持 -->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 <property name="dataSource" ref="dataSource"></property>
</bean>
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<property name="basePackage" 
	value="com.**.dao"> 
	</property>
	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	<!-- <property name="annotationClass" value="com.system.utils.MybatisRepository"/> --><!-- 自定义扫描注解，在dao层接口处用@MybatisRepository标签注解 -->
	
</bean>


</beans>
   