package com.zscq2.zhangdan.conftroller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.xwpf.model.XWPFHeaderFooterPolicy;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.UnderlinePatterns;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTP;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTR;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTSectPr;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTShd;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTTblWidth;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTText;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STTblWidth;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.Executions;
import org.zkoss.zk.ui.util.GenericForwardComposer;
import org.zkoss.zkplus.spring.SpringUtil;
import org.zkoss.zul.Combobox;
import org.zkoss.zul.Datebox;
import org.zkoss.zul.Label;
import org.zkoss.zul.ListModel;
import org.zkoss.zul.ListModelList;
import org.zkoss.zul.Listbox;
import org.zkoss.zul.Messagebox;
import org.zkoss.zul.Paging;
import org.zkoss.zul.Textbox;
import org.zkoss.zul.Window;

import com.system.utils.LogManage;
import com.system.utils.Screen;
import com.yewu.zscq.bean.User;
import com.zscq2.jxqd.bean.Ajlx;
import com.zscq2.jxqd.bean.Lazb;
import com.zscq2.jxqd.service.serviceimpl.LazbService;
import com.zscq2.ss.bean.Ssaj;
import com.zscq2.zhangdan.bean.WfCompany;
import com.zscq2.zhangdan.bean.ZdBean;
import com.zscq2.zhangdan.bean.ZdDetail;
import com.zscq2.zhangdan.service.ZdService;
import com.zscq2.zhangdan.word.TableCsfssq;
import com.zscq2.zhangdan.word.WordForYysq;


@Controller("zahngdanController")   
@Scope("prototype") 
public class ZahngdanController    extends GenericForwardComposer{
	
Window zhangdanWin;
Listbox listbox;//页面遍历方式加载数据
Paging paging;
Boolean pagingOnClick = false;//是否点击的分页标签

Label sumJe;//金额汇总
//查询条件
Textbox wtkh;//委托客户
Combobox ajlx;//案件类型
Textbox ajh;//案件号
Datebox zdrq_q1;//账单日期参数1
Datebox zdrq_q2;//账单日期参数2

Combobox wfCompany;//我方公司主体
WfCompany wfCompanyBean;//我方公司主体
//获取service对象
ZdService zdService = (ZdService)SpringUtil.getBean("zdService");
LazbService lazbService = (LazbService)SpringUtil.getBean("lazbService");

public void doAfterCompose(Component comp) throws Exception {
	super.doAfterCompose(comp);//该行必须存在，否则异常
	
	session.setAttribute("zahngdanController", this.getController());
	
	int screenWidth = (int)session.getAttribute("screenWidth");
	int screenHeight = (int)session.getAttribute("screenHeight");
    int[] t  =Screen.widthAndHeight("2",screenWidth,screenHeight);
        
    zhangdanWin.setWidth(screenWidth-t[0]+"px");
    zhangdanWin.setHeight(screenHeight-t[1]+"px");
    
    
	//案件类型
    List<Ajlx> list_ajlx = lazbService.selectAjlx(null);
	ListModel comboboxModelList =new ListModelList<Ajlx>();
	comboboxModelList = null;
	comboboxModelList = new ListModelList(list_ajlx);
	ajlx.setModel(comboboxModelList);
	
	//我方公司主体
    List<WfCompany> list_wf = zdService.selectWfCompany();
	ListModel comboboxModelList_wf =new ListModelList<WfCompany>();
	comboboxModelList_wf = null;
	comboboxModelList_wf = new ListModelList(list_wf);
	wfCompany.setModel(comboboxModelList_wf);
	
} 

/**
 * 查询方法
 */
public void onClick$queryButton(){
	
	Map map = new HashMap<Object,Object>();
	param(map);
	int begin = (int)map.get("begin");
	List<ZdBean> list = zdService.selectZd(map);
	Date d = new Date();
	
	ListModel listModelList =new ListModelList<ZdBean>();
	listModelList = null;
	if(list!= null && list.size()>0){
		for(int i=0;i<list.size();i++){
			list.get(i).setIndex(begin+i+1);
		}
		listModelList = new ListModelList(list);
	}

	listbox.setModel(listModelList);
	listbox.invalidate();	
	listbox.focus();//获得焦点，使复选框效果生效
	//初始化分页标签
	Integer a = Integer.MAX_VALUE;
	Integer a1 = Integer.MIN_VALUE;
	int count = zdService.selectZd_count(map);
	
	
	
	paging.setTotalSize(count);
	
	
	if(list != null && list.size()>0){
		String ids="";
		for(int i=0;i<list.size();i++){
			if(i==list.size()-1){
				ids = ids+list.get(i).getId();
			}else{
				ids = ids+list.get(i).getId()+",";
			}
		}
		map.clear();
		map.put("ids", ids);
		Map<Object,Object> count1 = zdService.getSumJe(map);
		sumJe.setValue("官费小计："+count1.get("a")+"元   代理费小计："+count1.get("b")+"元    总计： "+count1.get("c")+"元");
	}
	
}

/**
 * 新增按钮,弹出编辑窗口
 */
public void onClick$addButton() {
    //create a window programmatically and use it as a modal dialog.
	Map<String, Object> arg1 = new HashMap<String, Object>();
	arg1.put("msg", "Hello ZK!");

    Window window = (Window)Executions.createComponents(
            "/jsp/zscq/zhangdan/addZd.zul", zhangdanWin, arg1);
    window.doModal();
    
}
private void param(Map<Object,Object> map){
	if(wtkh.getValue() != null && !"".equals(wtkh.getValue())){
		map.put("wtkh", wtkh.getValue());
	}
	if(ajlx.getValue() != null ){
		map.put("ajlx", ajlx.getValue());
	}
	if(ajh.getValue() != null && !"".equals(ajh.getValue())){
		map.put("ajh", ajh.getValue());
	}
	SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd");
	if(zdrq_q1.getValue()!=null){
		map.put("zdrq_q1", f.format(zdrq_q1.getValue()));
	}
	if(zdrq_q2.getValue()!=null){
		Calendar calendar = new GregorianCalendar();
		Date date = zdrq_q2.getValue();
		calendar.setTime(date); 
		calendar.add(calendar.DATE,1);//把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime();
		map.put("zdrq_q2", f.format(date));
	}
	if(pagingOnClick == true){
		pagingOnClick = false;
		map.put("begin", paging.getPageSize()*paging.getActivePage());
		map.put("end", paging.getPageSize());
	}else{
		paging.setActivePage(0);
		map.put("begin", 0);
		map.put("end", paging.getPageSize());
	}
}

/**
 * 删除立案记录
 * @throws ParseException 
 */
public void onClick$deleteButton() throws ParseException{
	if(listbox.getSelectedItem() == null){
		Messagebox.show("请选择记录","注意", Messagebox.OK, Messagebox.EXCLAMATION);
		return;
	}else{
		ZdBean zd = (ZdBean)listbox.getSelectedItem().getValue();
		
		
		
		Messagebox.show("确认删除? \n 账单号："+zd.getZdnum()+"\n 委托客户："+zd.getWtkh()+"\n 案件类型："+ zd.getAjlx(), 
				"请确认", Messagebox.OK | Messagebox.CANCEL, Messagebox.QUESTION, new org.zkoss.zk.ui.event.EventListener() {
		    public void onEvent(org.zkoss.zk.ui.event.Event evt) throws java.lang.InterruptedException, ParseException {
		        if (evt.getName().equals("onOK")) {
		        	Map<Object, Object> map = new HashMap<Object, Object>();
					map.put("id", zd.getId());
					
					zdService.deleteZd(map);
					zdService.deleteZd_sub(map);
					onClick$queryButton();//刷新父窗口表格
					
					//记录操作日志
					User user = (User)session.getAttribute("user");
					LogManage logManage = new LogManage();
					logManage.addLog("删除账单："+zd.getZdnum(),user,"账单删除");
					
		        } 
		    }
		});
	    
	    
	}
}
/**
 * 清空查询条件
 */
public void onClick$clearButton(){
	ajh.setValue("");
	wtkh.setValue("");
	zdrq_q1.setValue(null);
	zdrq_q2.setValue(null);
	ajlx.setValue("");
	
}	
/**
 * 查看账单明细记录
 * @throws ParseException 
 */
public void onDoubleClick$listbox() throws ParseException{
	
	if(listbox.getSelectedItem() == null){
		Messagebox.show("请选择记录","注意", Messagebox.OK, Messagebox.EXCLAMATION);
		return;
	}else{
		ZdBean zdBean = (ZdBean)listbox.getSelectedItem().getValue();
		Map<String, Object> arg1 = new HashMap<String, Object>();
		arg1.put("zdBean", zdBean);
		
		Window window = (Window)Executions.createComponents(
	            "/jsp/zscq/zhangdan/zdDetail.zul", null, arg1);
	    
	    window.doModal();//模式弹窗
//	    window.doPopup();//非模式弹窗
	    
	    onClick$queryButton();//刷新父窗口表格
	}
}
public void onClick$exportButton() throws IOException{
	if(listbox.getSelectedItem() == null){
		Messagebox.show("请选择记录");
		return;
	}
	ZdBean zdBean = (ZdBean)listbox.getSelectedItem().getValue();
	
	
	Map<Object, Object> map = new HashMap<Object, Object>();
	map.put("zdid", zdBean.getId());
	List<ZdDetail> list = zdService.selectZd_sub(map);
	if("异议申请".equals(zdBean.getAjlx()) || "撤三申请".equals(zdBean.getAjlx()) || "撤三复审申请".equals(zdBean.getAjlx()) ||
			"注册申请".equals(zdBean.getAjlx()) || "驳回复审".equals(zdBean.getAjlx()) || "商标转让".equals(zdBean.getAjlx()) ||
			"无效申请".equals(zdBean.getAjlx()) || "无效答辩".equals(zdBean.getAjlx()) || "异议答辩".equals(zdBean.getAjlx()) || 
			"异议答辩".equals(zdBean.getAjlx())){
		WordForYysq yysq = new WordForYysq();
		yysq.yysq(zdBean,list);
	}else{
		Messagebox.show("当前案件类型缺少模板");
	}
	
}

/**
 * 盈天导出
 * @throws IOException 
 */
public void onClick$ytExportButton() throws IOException{
	if(wfCompany.getSelectedItem() == null ){
		Messagebox.show("请选择我方主体");
		return;
	}else{
		wfCompanyBean =wfCompany.getSelectedItem().getValue(); 
	}
	
	
	onClick$exportButton();
}
/**
 * 分页标签
 * @throws ParseException 
 */
public void onClick$paging() throws ParseException{
	 
	int activepage = paging.getActivePage();
	pagingOnClick = true;
	onClick$queryButton();
	if(activepage<=paging.getPageCount()-1){
	 paging.setActivePage(activepage);	 
	}else{
	 paging.setActivePage(0);
	}
	 
}
}